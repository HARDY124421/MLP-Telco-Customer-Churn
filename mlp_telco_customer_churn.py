# -*- coding: utf-8 -*-
"""MLP-Telco-Customer-Churn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u_gbERrIzv8ZkBxXJ9C4BGi4atJZkN6R
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load model and training columns
model = joblib.load('xgboost_churn_model.pkl')
feature_columns = joblib.load('xgb_columns.pkl')

# App title
st.title("ðŸ“‰ Telco Customer Churn Prediction App")
st.write("Enter customer details below to predict the likelihood of churn.")

# Input fields for key features
gender = st.selectbox("Gender", ["Male", "Female"])
SeniorCitizen = st.selectbox("Senior Citizen", [0, 1])
Partner = st.selectbox("Has Partner?", ["Yes", "No"])
Dependents = st.selectbox("Has Dependents?", ["Yes", "No"])
tenure = st.slider("Tenure (months)", 0, 72, 1)
PhoneService = st.selectbox("Phone Service", ["Yes", "No"])
PaperlessBilling = st.selectbox("Paperless Billing", ["Yes", "No"])
MonthlyCharges = st.number_input("Monthly Charges", min_value=0.0)
TotalCharges = st.number_input("Total Charges", min_value=0.0)

# Additional services
MultipleLines = st.selectbox("Multiple Lines", ["No phone service", "No", "Yes"])
InternetService = st.selectbox("Internet Service", ["DSL", "Fiber optic", "No"])
OnlineSecurity = st.selectbox("Online Security", ["No internet service", "No", "Yes"])
OnlineBackup = st.selectbox("Online Backup", ["No internet service", "No", "Yes"])
DeviceProtection = st.selectbox("Device Protection", ["No internet service", "No", "Yes"])
TechSupport = st.selectbox("Tech Support", ["No internet service", "No", "Yes"])
StreamingTV = st.selectbox("Streaming TV", ["No internet service", "No", "Yes"])
StreamingMovies = st.selectbox("Streaming Movies", ["No internet service", "No", "Yes"])

# Contract and Payment
Contract = st.selectbox("Contract Type", ["Month-to-month", "One year", "Two year"])
PaymentMethod = st.selectbox("Payment Method", [
    "Electronic check",
    "Mailed check",
    "Bank transfer (automatic)",
    "Credit card (automatic)"
])

# Prepare input DataFrame
input_dict = {
    'gender': gender,
    'SeniorCitizen': SeniorCitizen,
    'Partner': Partner,
    'Dependents': Dependents,
    'tenure': tenure,
    'PhoneService': PhoneService,
    'PaperlessBilling': PaperlessBilling,
    'MonthlyCharges': MonthlyCharges,
    'TotalCharges': TotalCharges,
    'MultipleLines': MultipleLines,
    'InternetService': InternetService,
    'OnlineSecurity': OnlineSecurity,
    'OnlineBackup': OnlineBackup,
    'DeviceProtection': DeviceProtection,
    'TechSupport': TechSupport,
    'StreamingTV': StreamingTV,
    'StreamingMovies': StreamingMovies,
    'Contract': Contract,
    'PaymentMethod': PaymentMethod
}
input_df = pd.DataFrame([input_dict])

# One-hot encoding to match training format
input_encoded = pd.get_dummies(input_df)
for col in feature_columns:
    if col not in input_encoded.columns:
        input_encoded[col] = 0
input_encoded = input_encoded[feature_columns]

# Predict churn
if st.button("Predict Churn"):
    prediction = model.predict(input_encoded)[0]
    prob = model.predict_proba(input_encoded)[0][1]
    if prediction == 1:
        st.error(f"ðŸ”´ High churn risk! Probability: {prob:.2%}")
    else:
        st.success(f"ðŸŸ¢ Low churn risk. Probability: {prob:.2%}")